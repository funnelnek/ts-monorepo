import { EmitterHandler, EventEmitter, NextFn, EventHandler } from "@funnelnek/common";
import { ChangeDetection } from "libs/common/src/types/ChangeDetection";
import { DispatchWithoutAction, MutableRefObject, MouseEvent, TouchEvent } from "react";
import { Observer, Subject, Subscription } from "rxjs";
import { Slide } from "./Slide";
export declare class Carousel implements EventEmitter {
    protected options: any;
    protected _isDragging: boolean;
    protected _showPreviousButton: boolean;
    protected _showNextButton: boolean;
    protected _dragStarted: boolean;
    protected latestX: number;
    protected previousScrollLeft: number;
    protected slides: Slide[];
    protected carousel: HTMLElement;
    protected margin: number;
    protected slideWidth: number;
    protected isDragging$: Subject<boolean>;
    protected showPreviousButton$: Subject<boolean>;
    protected showNextButton$: Subject<boolean>;
    protected dispatch: DispatchWithoutAction;
    protected subscriptions: Map<EmitterHandler, Subscription>;
    protected subscription: Subscription;
    protected ref: MutableRefObject<HTMLDivElement | undefined>;
    constructor(options: any);
    get isDragging(): boolean;
    get showPreviousButton(): boolean;
    get showNextButton(): boolean;
    next(e: MouseEvent): void;
    previous(e: MouseEvent): void;
    on<T = any>(event: string, observer: Observer<T>): Subscription;
    on(event: string, next: NextFn): Subscription;
    on(event: string, state: ChangeDetection, changeDetection: boolean): Subscription;
    on(event: string, handler: EventHandler): void;
    off(event: string, handler: (...args: any[]) => void): void;
    once(event: string, handler: (...args: any[]) => void): void;
    emit(event: string, ...args: any[]): void;
    onDrag(e: MouseEvent | TouchEvent): void;
    onDragStart(e: MouseEvent | TouchEvent): void;
    onDragEnd(e: MouseEvent | TouchEvent): void;
    use(dispatch: DispatchWithoutAction): void;
    init(node: HTMLDivElement): void;
    unmount(): void;
    protected shouldShowPreviousButton(): boolean;
    protected shouldShowNextButton(): boolean;
    protected showButtons(): void;
    protected auto(): void;
    protected displacement(x: number): number;
}
