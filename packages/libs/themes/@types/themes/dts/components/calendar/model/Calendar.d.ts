import { Observer, Subscription } from "rxjs";
import { CalendarProps, ICalendarDate } from "../contracts";
import { ICalendar } from "../contracts/ICalendar";
import { CalendarMode } from "../types";
import { immerable } from "immer";
import { EventHandler, FormEvent } from "react";
import { NextFn } from "@funnelnek/common";
import { ChangeDetection } from "libs/common/src/types/ChangeDetection";
export declare class Calendar implements ICalendar {
    static create(props: CalendarProps): ICalendar;
    private _format;
    private _today;
    private _currentMonth;
    private _currentMonthName;
    private _currentYear;
    private _currentDate;
    private _currentDay;
    private _currentDayOfWeek;
    private _currentWeek;
    private _target;
    private _targetMonth;
    private _targetYear;
    private _targetDay;
    private _targetDate;
    private _targetWeek;
    private _targetDayOfWeek;
    private _mode;
    private _searchDate;
    private self;
    private subscriptions;
    private month$;
    private year$;
    private date$;
    [immerable]: boolean;
    constructor(props?: CalendarProps);
    get mode(): CalendarMode;
    set mode(value: CalendarMode);
    get dayOfWeek(): string;
    get currentDayOfWeek(): string;
    get day(): number;
    get date(): number;
    get week(): number;
    get currentDate(): number;
    get currentDay(): number;
    get currentMonth(): string;
    get month(): string;
    get year(): number;
    get currentYear(): number;
    get format(): string;
    get target(): Date;
    get dates(): ICalendarDate[];
    on(event: string, observer: Observer<any>): Subscription;
    on(event: string, next: NextFn<any>): Subscription;
    on(event: string, state: ChangeDetection<any>, changeDetection: true): Subscription;
    on(event: string, handler: EventHandler<any>): void;
    off(event: string, handler: (...args: any[]) => void): void;
    once(event: string, handler: (...args: any[]) => void): void;
    onGoToChange(event: FormEvent<HTMLInputElement>): void;
    onGoTo(): void;
    emit(event: string): void;
    nextWeek(): void;
    previousWeek(): void;
    isLeapYear(): boolean;
    nextYear(): void;
    previousYear(): void;
    goto(date: Date): void;
    goto(date: string): void;
    getPreviousMonthLastDates(): ICalendarDate[];
    getActiveMonthDates(): ICalendarDate[];
    getNextMonthFirstDates(): ICalendarDate[];
    previousMonth(): void;
    nextMonth(): void;
    today(): void;
    next(): void;
    nextDate(): void;
    previous(): void;
    previousDate(): void;
    private getActiveCalendarMonthDates;
    private getDayName;
    private getMonthName;
    private calculateWeekOfYear;
}
